1. In order to use this versioning concept, we need the following two changes in our application

	Add one property of type int in our pojo class

	In hibernate mapping file, add an element called version soon after id element

2. Importance Of Wrapper And Primitive Types In Hibernate

	Normal :	private int productId;
 			private String proName;
 			private double price;

	Wrapper :	Integer productId;
 			String proName;
 			Integer price;

3. Actually our POJO class object having 3 states like…

	Transient state

		An object which is not associated with hibernate session and does not represent a row in the database is considered 		as transient. It will be garbage collected if no other object refers to it. transient sate then it will not contain 		any identifier (primary key value). 
		You have to use save, persist or saveOrUpdate methods to persist the transient object.


	Persistent state
		
		An object that is associated with the hibernate session is called as Persistent object. When the object is in 				persistent state, then it represent one row of the database and consists of an identifier value.You can make a 				transient instance persistent by associating it with a Session.
		
		
	Detached state : 
		Object which is just removed from hibernate session is called as detached object.The sate of the detached object is 			called as detached state.
		The detached object can be reattached to the new session and save to the database using update, saveOrUpdate and 		merge methods.



import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;
 
import com.first.Student;
 
public class ObjectStatesDemo {
    public static void main(String[] args) {
 
        // Transient object state
        Student student = new Student();
        student.setId(101);
        student.setName("Ragavan");
        student.setRoll("10");
        student.setDegree("MSC");
        student.setPhone("9999");
        // Transient object state
        Session session = new AnnotationConfiguration().configure()
                .buildSessionFactory().openSession();
        Transaction t = session.beginTransaction();
        // Persistent object state
        session.save(student);
        t.commit();
        // Persistent object state
        session.close();
        // Detached object state
 
    }
}

 

